import math
from datetime import datetime
from unittest.mock import patch

import pytest

from src.views import get_greeting, process_transactions, top_transactions


@pytest.fixture
def transaction() -> list:
    return [
        {
            "Дата операции": "31.12.2021 16:44:00",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -160.89,
            "Валюта операции": "RUB",
            "Сумма платежа": -160.89,
            "Валюта платежа": "RUB",
            "Кэшбэк": math.nan,
            "Категория": "Супермаркеты",
            "MCC": 5411.0,
            "Описание": "Колхоз",
            "Бонусы (включая кэшбэк)": 3,
            "Сумма операции с округлением": 160.89,
        },
        {
            "Дата операции": "31.12.2021 16:42:04",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -64.0,
            "Валюта операции": "RUB",
            "Сумма платежа": 64.0,
            "Валюта платежа": "RUB",
            "Кэшбэк": math.nan,
            "Категория": "Супермаркеты",
            "Описание": "Колхоз",
            "Бонусы (включая кэшбэк)": 1,
            "Сумма операции с округлением": 64.0,
        },
        {
            "Дата операции": "31.12.2021 16:39:04",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -118.12,
            "Валюта операции": "RUB",
            "Сумма платежа": -118.12,
            "Валюта платежа": "RUB",
            "Кэшбэк": math.nan,
            "Категория": "Супермаркеты",
            "MCC": 5411.0,
            "Описание": "Магнит",
            "Бонусы (включая кэшбэк)": 2,
            "Сумма операции с округлением": 118.12,
        },
        {
            "Дата операции": "31.12.2021 15:44:39",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -78.05,
            "Валюта операции": "RUB",
            "Сумма платежа": -78.05,
            "Валюта платежа": "RUB",
            "Кэшбэк": math.nan,
            "Категория": "Супермаркеты",
            "Описание": "Колхоз",
            "Бонусы (включая кэшбэк)": 1,
            "Сумма операции с округлением": 78.05,
        },
        {
            "Дата операции": "09.12.2021 15:55:37",
            "Дата платежа": "09.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -369.0,
            "Валюта операции": "RUB",
            "Сумма платежа": -369.0,
            "Валюта платежа": "RUB",
            "Кэшбэк": math.nan,
            "Категория": "Супермаркеты",
            "Описание": "Колхоз",
            "Бонусы (включая кэшбэк)": 7,
            "Сумма операции с округлением": 369.0,
        },
        {
            "Дата операции": "09.12.2021 15:49:26",
            "Дата платежа": "09.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -90.1,
            "Валюта операции": "RUB",
            "Сумма платежа": -90.1,
            "Валюта платежа": "RUB",
            "Кэшбэк": math.nan,
            "Категория": "Супермаркеты",
            "Описание": "Колхоз",
            "Бонусы (включая кэшбэк)": 1,
            "Сумма операции с округлением": 90.1,
        },
        {
            "Дата операции": "09.12.2021 09:27:38",
            "Дата платежа": "09.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -65.9,
            "Валюта операции": "RUB",
            "Сумма платежа": -65.9,
            "Валюта платежа": "RUB",
            "Кэшбэк": math.nan,
            "Категория": "Супермаркеты",
            "Описание": "Перекрёсток",
            "Бонусы (включая кэшбэк)": 1,
            "Сумма операции с округлением": 65.9,
        },
        {
            "Дата операции": "07.12.2021 17:25:47",
            "Дата платежа": "07.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -41.0,
            "Валюта операции": "RUB",
            "Сумма платежа": -41.0,
            "Валюта платежа": "RUB",
            "Кэшбэк": math.nan,
            "Категория": "Супермаркеты",
            "Описание": "Перекрёсток",
            "Бонусы (включая кэшбэк)": 0,
            "Сумма операции с округлением": 41.0,
        },
    ]


@pytest.mark.parametrize(
    "mocked_time, expected_result",
    [
        (datetime(2023, 1, 1, 6, 0), "Доброе утро"),
        (datetime(2023, 1, 1, 13, 0), "Добрый день"),
        (datetime(2023, 1, 1, 19, 0), "Добрый вечер"),
        (datetime(2023, 1, 1, 2, 0), "Доброй ночи"),
        (datetime(2023, 1, 1, 23, 30), "Доброй ночи"),
    ],
)
def test_get_greeting(mocked_time: datetime, expected_result: str) -> None:
    with patch("datetime.datetime") as mock_datetime:
        mock_datetime.now.return_value = mocked_time
        assert get_greeting(mock_datetime) == expected_result


def test_process_transactions() -> None:
    data = [{"Номер карты": "*3456", "Сумма операции": -3000.0}]
    expected_result = [{"last_digits": "3456", "total_spent": 3000.0, "cashback": 30.0}]

    assert process_transactions(data) == expected_result


def test_top_transactions(transaction: list) -> None:
    expected_result = [
        {"date": "31.12.2021", "amount": 64.0, "category": "Супермаркеты", "description": "Колхоз"},
        {"date": "07.12.2021", "amount": 41.0, "category": "Супермаркеты", "description": "Перекрёсток"},
        {"date": "09.12.2021", "amount": 65.9, "category": "Супермаркеты", "description": "Перекрёсток"},
        {"date": "31.12.2021", "amount": 78.05, "category": "Супермаркеты", "description": "Колхоз"},
        {"date": "09.12.2021", "amount": 90.1, "category": "Супермаркеты", "description": "Колхоз"},
    ]
    assert top_transactions(transaction) == expected_result
